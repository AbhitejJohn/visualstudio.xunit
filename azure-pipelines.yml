trigger:
- master
- rel/*

pr:
- master
- rel/*

pool:
  vmImage: windows-2019

variables: 
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:

- task: DotNetCoreInstaller@0
  inputs:
    version: '2.2.300'

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . nbgv
  displayName: Install NBGV tool
  
- script: nbgv cloud
  displayName: Set Version

- task: MSBuild@1
  displayName: Build
  inputs:
    solution: visualstudio.xunit.sln
    msbuildArguments: /restore /p:UseDotNetNativeToolchain=false /p:PackageOutputPath=$(Build.ArtifactStagingDirectory)\CI
    configuration: $(BuildConfiguration)
    maximumCpuCount: true

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: test/test.xunit.runner.visualstudio/test.xunit.runner.visualstudio.csproj
    arguments: -c $(BuildConfiguration) --no-build --no-restore --settings $(Build.SourcesDirectory)/test/CodeCoverage.runsettings --collect:"XPlat Code Coverage"
  displayName: Run Unit Tests
  
- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool  

- script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/test/coverlet/reports -reporttypes:"Cobertura"
  displayName: Create reports

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/test/coverlet/reports/Cobertura.xml

- task: PowerShell@2
  displayName: Authenticode Artifacts
  inputs:
    filePath: scripts/Sign-Package.ps1
  env:
    SignClientUser: $(SignClientUser)
    SignClientSecret: $(SignClientSecret)
    ArtifactDirectory: $(Build.ArtifactStagingDirectory)
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

- task: PublishBuildArtifacts@1
  displayName: Publish CI Artifacts
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)\CI
    artifactType: container
    artifactName: CI
