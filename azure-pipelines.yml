trigger:
- master
- rel/*

pr:
- master
- rel/*

pool:
  vmImage: vs2017-win2016

variables: 
  BuildConfiguration: Release

steps:
- task: DotNetCoreCLI@2  
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . nbgv
  displayName: Install NBGV tool
  
- script: nbgv cloud
  displayName: Set Version

- powershell: |   
    # version    
    $ver = .\nbgv get-version -f json | ConvertFrom-Json
        
    $doc = Get-Content ".\src\xunit.runner.visualstudio.nuspec"
    $doc | % { $_.Replace("99.99.99-dev", "$($ver.NuGetPackageVersion)") } | Set-Content ".\src\xunit.runner.visualstudio.nuspec"    
  displayName: Update Versions

- task: MSBuild@1
  displayName: Build
  inputs:
    solution: visualstudio.xunit.sln
    msbuildArguments: /restore /p:UseDotNetNativeToolchain=false
    configuration: $(BuildConfiguration)
    maximumCpuCount: true

- task: DotNetCoreCLI@2
  displayName: 'Publish netcoreapp1.0 version'
  inputs:
    command: publish
    publishWebProjects: false
    projects: src/xunit.runner.visualstudio/xunit.runner.visualstudio.csproj
    arguments: '--framework netcoreapp1.0 --configuration $(BuildConfiguration)'
    zipAfterPublish: false
    modifyOutputPath: false

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.2'
  inputs:
    versionSpec: 4.9.2

- task: NuGetCommand@2
  displayName: Pack
  inputs:
    command: pack
    packagesToPack: src/xunit.runner.visualstudio.nuspec
    configuration: $(BuildConfiguration)
    packDestination: $(Build.ArtifactStagingDirectory)\CI

# - task: MSBuild@1
#   displayName: Pack 
#   inputs:
#     solution: src/xunit.runner.visualstudio/xunit.runner.visualstudio.csproj
#     msbuildArguments: /t:pack /p:PackageOutputPath=$(Build.ArtifactStagingDirectory)\CI
#     configuration: $(BuildConfiguration)
#     maximumCpuCount: true  

- task: MSBuild@1
  displayName: Build for Test (ppdb) workaround
  inputs:
    solution: test/test.xunit.runner.visualstudio/test.xunit.runner.visualstudio.csproj
    msbuildArguments: /t:build /p:DebugType=portable      
    configuration: $(BuildConfiguration)
    maximumCpuCount: true

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: test/test.xunit.runner.visualstudio/test.xunit.runner.visualstudio.csproj
    arguments: -c $(BuildConfiguration) --no-build --no-restore --collect:"Code Coverage" -s $(System.DefaultWorkingDirectory)/test/CodeCoverage.runsettings
  displayName: Run Unit Tests

- task: PowerShell@2
  displayName: Authenticode Artifacts
  inputs:
    filePath: scripts/Sign-Package.ps1
  env:
    SignClientUser: $(SignClientUser)
    SignClientSecret: $(SignClientSecret)
    ArtifactDirectory: $(Build.ArtifactStagingDirectory)
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

- task: PublishBuildArtifacts@1
  displayName: Publish CI Artifacts
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)\CI
    artifactType: container
    artifactName: CI
